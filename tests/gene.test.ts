import Gene from "../src/scripts/component/sequence/gene";
import { GeneData } from "../src/scripts/types";
import { select } from "d3-selection";
import { scaleLinear } from "d3-scale";

describe("Test gene componennt", () => {
  const result = '<g class="gene" transform="translate(100,60)"><path style="fill-opacity: 0.85; stroke-width: 1px; stroke-opacity: 0.8;" transform="translate(0,35) translate(400,30) rotate(180)" d="M0,0L0,30L390,30L400,15L390,0Z"></path></g><g class="gene" transform="translate(600,60)"><path style="fill-opacity: 0.85; stroke-width: 1px; stroke-opacity: 0.8;" d="M0,0L0,30L390,30L400,15L390,0Z"></path></g>';
  document.body.innerHTML =
    '<div><svg width="500"><g id="container"></g></svg></div>';
  const data: GeneData[] = [{
    name: "gene 1",
    strand: "-",
    begin: 10,
    end: 50,
    gene: "insA",
    eventHandler: {
      click: (geneLocation) => [...geneLocation]
    }
  },
  {
    name: "gene 2",
    strand: "+",
    begin: 60,
    end: 100,
    gene: "yaaY",
    eventHandler: {
      click: (geneLocation) => [...geneLocation]
    }
  }];
  let window = [0, 120];
  const geneComponent = Gene();
  const xScale = scaleLinear()
    .domain(window)
    .range([0, 1200]);

  const container = select("svg")
    .select<SVGGElement>("g");

  test("test html generated by gene component", () => {

    container
      .datum<GeneData[]>(data)
      .call(geneComponent, xScale);

    expect(container.html()).toBe(result);
  });

  test("Click", () => {
    const result = '<g class=\"gene\" transform=\"translate(0,60)\"><path style=\"fill-opacity: 0.85; stroke-width: 1px; stroke-opacity: 0.8;\" transform=\"translate(0,35) translate(400,30) rotate(180)\" d=\"M0,0L0,30L390,30L400,15L390,0Z\"></path></g><g class=\"gene\" transform=\"translate(500,60)\"><path style=\"fill-opacity: 0.85; stroke-width: 1px; stroke-opacity: 0.8;\" d=\"M0,0L0,30L390,30L400,15L390,0Z\"></path></g>';
    const path = container.selectAll(".gene").select<SVGPathElement>("path");
    if (path) {
      path.dispatch("click");
      window = [10, 100]
      xScale.domain(window).range([0, 900]);
      container
        .datum<GeneData[]>(data)
        .call(geneComponent, xScale);
      expect(container.html()).toBe(result);
    }
  });

});